"""
Test Interactive Brokers / Lynx connection
"""
import sys
from pathlib import Path
import time
from datetime import datetime

# Add parent directory to path
sys.path.append(str(Path(__file__).parent))

from backend.config import logger
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

print("=" * 60)
print("üß™ Test de connexion IBKR / Lynx")
print("=" * 60)
print()

# Display configuration
IBKR_HOST = os.getenv('IBKR_HOST', '127.0.0.1')
IBKR_PORT = int(os.getenv('IBKR_PORT', '7497'))
IBKR_CLIENT_ID = int(os.getenv('IBKR_CLIENT_ID', '1'))
IBKR_ACCOUNT = os.getenv('IBKR_ACCOUNT', 'DU0118471')

print(f"üìã Configuration:")
print(f"   Host: {IBKR_HOST}")
print(f"   Port: {IBKR_PORT}")
print(f"   Client ID: {IBKR_CLIENT_ID}")
print(f"   Account: {IBKR_ACCOUNT}")
print()

# Check if ib_insync is installed
try:
    from ib_insync import IB, Stock, util
    print("‚úÖ Biblioth√®que ib_insync install√©e")
except ImportError:
    print("‚ùå Biblioth√®que ib_insync non install√©e")
    print()
    print("Installation requise:")
    print("   pip install ib_insync")
    sys.exit(1)

print()
print("-" * 60)
print("üîå Tentative de connexion √† IB Gateway...")
print("-" * 60)
print()

try:
    # Create IB instance
    ib = IB()
    
    # Connect to IB Gateway
    print(f"‚è≥ Connexion √† {IBKR_HOST}:{IBKR_PORT}...")
    ib.connect(IBKR_HOST, IBKR_PORT, clientId=IBKR_CLIENT_ID)
    
    print("‚úÖ Connexion √©tablie avec succ√®s!")
    print()
    
    # Get account information
    print("-" * 60)
    print("üìä Informations du compte")
    print("-" * 60)
    print()
    
    # Get managed accounts
    accounts = ib.managedAccounts()
    print(f"üìã Comptes g√©r√©s: {', '.join(accounts)}")
    print()
    
    # Use accountSummary() - more reliable and faster
    print("‚è≥ R√©cup√©ration du r√©sum√© du compte...")
    
    summary_tags = [
        'AccountType', 'NetLiquidation', 'TotalCashValue', 
        'BuyingPower', 'AvailableFunds', 'GrossPositionValue',
        'UnrealizedPnL', 'RealizedPnL', 'EquityWithLoanValue',
        'InitMarginReq', 'MaintMarginReq'
    ]
    
    # Request account summary for all accounts
    account_summary = ib.accountSummary()
    ib.sleep(2)  # Wait for data to arrive
    
    if account_summary:
        print(f"‚úÖ {len(account_summary)} valeurs re√ßues")
        print()
        
        # Group by currency
        summary_by_currency = {}
        for item in account_summary:
            if item.currency not in summary_by_currency:
                summary_by_currency[item.currency] = {}
            summary_by_currency[item.currency][item.tag] = item.value
        
        # Display by currency
        tag_labels = {
            'AccountType': 'Type de compte',
            'NetLiquidation': 'üí∞ Valeur nette totale',
            'TotalCashValue': 'Cash total',
            'BuyingPower': 'Pouvoir d\'achat',
            'AvailableFunds': 'Fonds disponibles',
            'GrossPositionValue': 'Valeur positions',
            'UnrealizedPnL': 'P&L non r√©alis√©',
            'RealizedPnL': 'P&L r√©alis√©',
            'EquityWithLoanValue': 'Capital avec pr√™t',
            'InitMarginReq': 'Marge initiale',
            'MaintMarginReq': 'Marge maintenance'
        }
        
        for currency, values in summary_by_currency.items():
            if currency:  # Skip empty/base currency entries
                print(f"   üíµ Devise: {currency}")
                print(f"   {'-' * 70}")
                for tag in summary_tags:
                    if tag in values:
                        label = tag_labels.get(tag, tag)
                        value_str = values[tag]
                        try:
                            value_float = float(value_str)
                            if abs(value_float) >= 1000:
                                print(f"   {label:30} : {value_float:>25,.2f} {currency}")
                            else:
                                print(f"   {label:30} : {value_float:>25.2f} {currency}")
                        except:
                            print(f"   {label:30} : {value_str:>25} {currency}")
                print()
    else:
        print("‚ö†Ô∏è Aucune donn√©e de compte re√ßue")
    
    print()
    
    # Get positions
    print("-" * 60)
    print("üìà Positions actuelles")
    print("-" * 60)
    print()
    
    positions = ib.positions(IBKR_ACCOUNT)
    
    if positions:
        for pos in positions:
            print(f"   {pos.contract.symbol:10} : {pos.position:>8} @ {pos.avgCost:.2f}")
    else:
        print("   Aucune position ouverte")
    
    print()
    
    # Test market data subscription for a French stock
    print("-" * 60)
    print("üì° Test de donn√©es de march√© (WLN - Worldline)")
    print("-" * 60)
    print()
    
    # Create contract for Worldline (Euronext Paris)
    wln_contract = Stock('WLN', 'SMART', 'EUR')
    
    print("‚è≥ Qualification du contrat...")
    contracts = ib.qualifyContracts(wln_contract)
    
    if contracts:
        contract = contracts[0]
        print(f"‚úÖ Contrat qualifi√©: {contract.symbol} ({contract.primaryExchange})")
        print()
        
        # Request market data
        print("‚è≥ Demande de donn√©es de march√©...")
        ticker = ib.reqMktData(contract)
        
        # Wait for data
        ib.sleep(2)
        
        if ticker.last > 0 or ticker.bid > 0 or ticker.ask > 0:
            print("‚úÖ Donn√©es de march√© re√ßues:")
            print(f"   Dernier prix : {ticker.last if ticker.last > 0 else 'N/A'}")
            print(f"   Bid         : {ticker.bid if ticker.bid > 0 else 'N/A'}")
            print(f"   Ask         : {ticker.ask if ticker.ask > 0 else 'N/A'}")
            print(f"   Volume      : {ticker.volume if ticker.volume > 0 else 'N/A'}")
            print(f"   Heure       : {ticker.time}")
        else:
            print("‚ö†Ô∏è  Pas de donn√©es temps r√©el (march√© ferm√© ou donn√©es diff√©r√©es)")
        
        # Cancel market data
        ib.cancelMktData(contract)
    else:
        print("‚ùå Impossible de qualifier le contrat WLN")
    
    print()
    
    # Test historical data
    print("-" * 60)
    print("üìú Test de donn√©es historiques (WLN - 1 jour)")
    print("-" * 60)
    print()
    
    if contracts:
        contract = contracts[0]
        
        print("‚è≥ Demande de donn√©es historiques...")
        bars = ib.reqHistoricalData(
            contract,
            endDateTime='',
            durationStr='1 D',
            barSizeSetting='1 min',
            whatToShow='TRADES',
            useRTH=False,
            formatDate=1
        )
        
        if bars:
            print(f"‚úÖ {len(bars)} barres re√ßues")
            print()
            print("   Derni√®res barres:")
            for bar in bars[-5:]:
                print(f"   {bar.date} | O:{bar.open:.2f} H:{bar.high:.2f} L:{bar.low:.2f} C:{bar.close:.2f} V:{bar.volume}")
        else:
            print("‚ö†Ô∏è  Aucune donn√©e historique disponible")
    
    print()
    
    # Disconnect
    print("-" * 60)
    print("üîå D√©connexion...")
    print("-" * 60)
    print()
    
    ib.disconnect()
    print("‚úÖ D√©connect√© avec succ√®s")
    
    print()
    print("=" * 60)
    print("‚úÖ Test r√©ussi ! Votre connexion IBKR/Lynx fonctionne")
    print("=" * 60)
    
except Exception as e:
    print(f"‚ùå Erreur: {e}")
    print()
    print("V√©rifications:")
    print("1. IB Gateway est-il d√©marr√©?")
    print("2. L'API est-elle activ√©e dans Configuration ‚Üí API ‚Üí Settings?")
    print("3. Le port 7497 est-il correct?")
    print("4. 127.0.0.1 est-il dans les IPs de confiance?")
    print()
    import traceback
    print("D√©tails de l'erreur:")
    print(traceback.format_exc())
    sys.exit(1)

finally:
    if 'ib' in locals() and ib.isConnected():
        ib.disconnect()
