"""
Alternative data source for historical data - Yahoo Finance
Pour le backtesting et la cr√©ation de strat√©gies avec des donn√©es r√©elles
"""
import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta
from typing import Optional
import sys
from pathlib import Path

# Add parent directory to path
parent_dir = str(Path(__file__).parent.parent)
if parent_dir not in sys.path:
    sys.path.append(parent_dir)

from backend.config import logger
from backend.models import SessionLocal, Ticker, HistoricalData


class YahooFinanceCollector:
    """
    Collecteur de donn√©es historiques via Yahoo Finance
    Alternative pour obtenir de gros volumes de donn√©es historiques
    """
    
    # Mapping des tickers fran√ßais pour Yahoo Finance
    FRENCH_TICKER_MAPPING = {
        'GLE': 'GLE.PA',      # Soci√©t√© G√©n√©rale
        'MC': 'MC.PA',        # LVMH
        'OR': 'OR.PA',        # L'Or√©al
        'TTE': 'TTE.PA',      # TotalEnergies (ex FP.PA)
        'BNP': 'BNP.PA',      # BNP Paribas
        'AI': 'AI.PA',        # Air Liquide
        'SAN': 'SAN.PA',      # Sanofi
        'ACA': 'ACA.PA',      # Cr√©dit Agricole
        'SU': 'SU.PA',        # Schneider Electric
        'CAP': 'CAP.PA',      # Capgemini
        'CS': 'CS.PA',        # AXA
        'DG': 'DG.PA',        # Vinci
        'BN': 'BN.PA',        # Danone
        'RI': 'RI.PA',        # Pernod Ricard
        'RMS': 'RMS.PA',      # Herm√®s
        'KER': 'KER.PA',      # Kering
    }
    
    def __init__(self):
        """Initialize Yahoo Finance collector"""
        logger.info("üìä Yahoo Finance collector initialized")
    
    def get_yahoo_ticker(self, symbol: str) -> str:
        """
        Convert French ticker to Yahoo Finance ticker
        
        Args:
            symbol: French ticker (e.g., 'GLE')
            
        Returns:
            Yahoo Finance ticker (e.g., 'GLE.PA')
        """
        return self.FRENCH_TICKER_MAPPING.get(symbol, f"{symbol}.PA")
    
    def fetch_historical_data(
        self,
        symbol: str,
        period: str = "1y",
        interval: str = "1d"
    ) -> Optional[pd.DataFrame]:
        """
        Fetch historical data from Yahoo Finance
        
        Args:
            symbol: French ticker symbol
            period: Data period ('1d','5d','1mo','3mo','6mo','1y','2y','5y','10y','ytd','max')
            interval: Data interval ('1m','2m','5m','15m','30m','60m','90m','1h','1d','5d','1wk','1mo','3mo')
            
        Returns:
            DataFrame with OHLCV data
            
        Note:
            - Pour interval < 1 jour, p√©riode max = 60 jours
            - Pour interval >= 1 jour, p√©riode max = illimit√©e
        """
        try:
            yahoo_ticker = self.get_yahoo_ticker(symbol)
            logger.info(f"üì• Fetching {symbol} ({yahoo_ticker}) from Yahoo Finance: period={period}, interval={interval}")
            
            ticker = yf.Ticker(yahoo_ticker)
            df = ticker.history(period=period, interval=interval)
            
            if df.empty:
                logger.warning(f"‚ö†Ô∏è No data received for {symbol}")
                return None
            
            # Rename columns to match our schema
            df = df.rename(columns={
                'Open': 'open',
                'High': 'high',
                'Low': 'low',
                'Close': 'close',
                'Volume': 'volume'
            })
            
            # Keep only necessary columns
            df = df[['open', 'high', 'low', 'close', 'volume']]
            
            logger.info(f"‚úÖ Received {len(df)} data points for {symbol}")
            return df
            
        except Exception as e:
            logger.error(f"‚ùå Error fetching data from Yahoo Finance: {e}")
            return None
    
    def store_to_database(
        self,
        symbol: str,
        name: str,
        df: pd.DataFrame
    ) -> int:
        """
        Store data in database
        
        Args:
            symbol: Ticker symbol
            name: Company name
            df: DataFrame with historical data
            
        Returns:
            Number of records inserted
        """
        if df is None or df.empty:
            return 0
        
        db = SessionLocal()
        try:
            # Get or create ticker
            ticker_obj = db.query(Ticker).filter(Ticker.symbol == symbol).first()
            if not ticker_obj:
                ticker_obj = Ticker(symbol=symbol, name=name)
                db.add(ticker_obj)
                db.commit()
                db.refresh(ticker_obj)
                logger.info(f"‚úÖ Created ticker: {symbol}")
            
            inserted = 0
            
            for timestamp, row in df.iterrows():
                # Convert timestamp to datetime
                if isinstance(timestamp, pd.Timestamp):
                    timestamp = timestamp.to_pydatetime()
                
                # Check if record already exists
                existing = db.query(HistoricalData).filter(
                    HistoricalData.ticker_id == ticker_obj.id,
                    HistoricalData.timestamp == timestamp
                ).first()
                
                if not existing:
                    record = HistoricalData(
                        ticker_id=ticker_obj.id,
                        timestamp=timestamp,
                        open=float(row['open']),
                        high=float(row['high']),
                        low=float(row['low']),
                        close=float(row['close']),
                        volume=int(row['volume']),
                        interval='1day'  # Default, could be parameterized
                    )
                    db.add(record)
                    inserted += 1
            
            db.commit()
            logger.info(f"‚úÖ Inserted {inserted} new records for {symbol}")
            return inserted
            
        except Exception as e:
            db.rollback()
            logger.error(f"‚ùå Error storing data: {e}")
            return 0
        finally:
            db.close()
    
    def collect_and_store(
        self,
        symbol: str,
        name: str,
        period: str = "1y",
        interval: str = "1d"
    ) -> int:
        """
        Fetch and store historical data in one operation
        
        Args:
            symbol: French ticker symbol
            name: Company name
            period: Data period
            interval: Data interval
            
        Returns:
            Number of records inserted
        """
        df = self.fetch_historical_data(symbol, period, interval)
        if df is not None:
            return self.store_to_database(symbol, name, df)
        return 0


def demo_yahoo_finance():
    """Demonstration of Yahoo Finance collector"""
    
    print("\n" + "="*70)
    print("COLLECTEUR YAHOO FINANCE - D√âMONSTRATION")
    print("="*70)
    print("\nüí° Yahoo Finance permet de r√©cup√©rer:")
    print("   - Jusqu'√† 10 ans d'historique quotidien")
    print("   - Jusqu'√† 60 jours d'historique intraday (1min, 5min, etc.)")
    print("   - SANS limite de 1200 points !")
    print("\n" + "="*70)
    
    collector = YahooFinanceCollector()
    
    # Test 1: R√©cup√©rer 5 ans de donn√©es quotidiennes
    print("\nüîç Test 1: 5 ans de donn√©es quotidiennes pour Soci√©t√© G√©n√©rale")
    print("-" * 70)
    
    inserted = collector.collect_and_store(
        symbol="GLE",
        name="Soci√©t√© G√©n√©rale",
        period="5y",
        interval="1d"
    )
    
    if inserted > 0:
        print(f"‚úÖ {inserted} points collect√©s (environ 1250 jours de bourse)")
        print("   ‚Üí Parfait pour le backtesting long terme !")
    
    # Test 2: Donn√©es intraday r√©centes
    print("\nüîç Test 2: 60 jours de donn√©es 1 heure pour LVMH")
    print("-" * 70)
    
    inserted = collector.collect_and_store(
        symbol="MC",
        name="LVMH",
        period="60d",
        interval="1h"
    )
    
    if inserted > 0:
        print(f"‚úÖ {inserted} points collect√©s")
        print("   ‚Üí Id√©al pour strat√©gies intraday !")
    
    # Test 3: Maximum de donn√©es
    print("\nüîç Test 3: Maximum de donn√©es (10 ans) pour TotalEnergies")
    print("-" * 70)
    
    inserted = collector.collect_and_store(
        symbol="TTE",
        name="TotalEnergies",
        period="max",
        interval="1d"
    )
    
    if inserted > 0:
        print(f"‚úÖ {inserted} points collect√©s")
        print("   ‚Üí Donn√©es historiques compl√®tes pour analyse approfondie !")
    
    # Afficher les statistiques
    print("\n" + "="*70)
    print("STATISTIQUES DE LA BASE DE DONN√âES")
    print("="*70)
    
    db = SessionLocal()
    try:
        for ticker in db.query(Ticker).all():
            count = db.query(HistoricalData).filter(
                HistoricalData.ticker_id == ticker.id
            ).count()
            print(f"   {ticker.symbol}: {count:,} points")
    finally:
        db.close()
    
    print("\nüí° Avantages de Yahoo Finance:")
    print("   ‚úÖ Gratuit et sans limite stricte")
    print("   ‚úÖ Donn√©es historiques sur plusieurs ann√©es")
    print("   ‚úÖ Fiable et largement utilis√©")
    print("   ‚úÖ Pas besoin de compte production")
    print("\n‚ö†Ô∏è  Limitations:")
    print("   - Donn√©es intraday limit√©es √† 60 jours")
    print("   - Pas de donn√©es tick-by-tick")
    print("   - Peut avoir un l√©ger d√©lai (15-20 min)")


if __name__ == "__main__":
    # V√©rifier si yfinance est install√©
    try:
        import yfinance
        demo_yahoo_finance()
    except ImportError:
        print("\n‚ùå Erreur: Le module 'yfinance' n'est pas install√©")
        print("\nüì¶ Pour l'installer:")
        print("   pip install yfinance")
        print("\nüí° Une fois install√©, relancez ce script pour collecter des donn√©es !")
