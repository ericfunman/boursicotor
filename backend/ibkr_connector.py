"""
Module de connexion √† Interactive Brokers via l'API TWS
Compatible avec Lynx (qui utilise la m√™me API qu'IBKR)
"""

import time
import threading
from datetime import datetime
from ibapi.client import EClient
from ibapi.wrapper import EWrapper
from ibapi.contract import Contract
import pandas as pd


class IBKRWrapper(EWrapper):
    """Classe pour recevoir les callbacks de l'API IBKR"""
    
    def __init__(self):
        EWrapper.__init__(self)
        self.next_order_id = None
        self.market_data = {}
        self.historical_data = {}
        self.contract_details_list = []
        self.data_ready = threading.Event()
        
    def error(self, reqId, errorCode, errorString, advancedOrderRejectJson=""):
        """Gestion des erreurs"""
        # Codes 2104 et 2106 sont des messages info, pas des erreurs
        if errorCode in [2104, 2106, 2158]:
            print(f"INFO {errorCode}: {errorString}")
        else:
            print(f"ERREUR {errorCode} (reqId {reqId}): {errorString}")
    
    def nextValidId(self, orderId: int):
        """Re√ßoit le prochain ID d'ordre valide"""
        self.next_order_id = orderId
        print(f"Connexion r√©ussie! Prochain order ID: {orderId}")
    
    def tickPrice(self, reqId, tickType, price, attrib):
        """Re√ßoit les prix en temps r√©el"""
        if reqId not in self.market_data:
            self.market_data[reqId] = {}
        
        # TickType: 1=bid, 2=ask, 4=last, 6=high, 7=low, 9=close
        tick_names = {1: 'bid', 2: 'ask', 4: 'last', 6: 'high', 7: 'low', 9: 'close'}
        if tickType in tick_names:
            self.market_data[reqId][tick_names[tickType]] = price
            self.market_data[reqId]['timestamp'] = datetime.now()
    
    def tickSize(self, reqId, tickType, size):
        """Re√ßoit les volumes en temps r√©el"""
        if reqId not in self.market_data:
            self.market_data[reqId] = {}
        
        # TickType: 0=bid_size, 3=ask_size, 5=last_size, 8=volume
        tick_names = {0: 'bid_size', 3: 'ask_size', 5: 'last_size', 8: 'volume'}
        if tickType in tick_names:
            self.market_data[reqId][tick_names[tickType]] = size
    
    def historicalData(self, reqId, bar):
        """Re√ßoit les donn√©es historiques"""
        if reqId not in self.historical_data:
            self.historical_data[reqId] = []
        
        self.historical_data[reqId].append({
            'date': bar.date,
            'open': bar.open,
            'high': bar.high,
            'low': bar.low,
            'close': bar.close,
            'volume': bar.volume
        })
    
    def historicalDataEnd(self, reqId, start, end):
        """Signale la fin de la r√©ception des donn√©es historiques"""
        print(f"Donn√©es historiques re√ßues pour reqId {reqId}: {start} √† {end}")
        self.data_ready.set()
    
    def contractDetails(self, reqId, contractDetails):
        """Re√ßoit les d√©tails d'un contrat"""
        self.contract_details_list.append(contractDetails)
    
    def contractDetailsEnd(self, reqId):
        """Signale la fin de la r√©ception des d√©tails de contrat"""
        print(f"D√©tails du contrat re√ßus pour reqId {reqId}")
        self.data_ready.set()


class IBKRClient(EClient):
    """Classe client pour envoyer des requ√™tes √† IBKR"""
    
    def __init__(self, wrapper):
        EClient.__init__(self, wrapper)


class IBKRConnector:
    """
    Connecteur principal pour IBKR/Lynx
    """
    
    def __init__(self, host='127.0.0.1', port=4002, client_id=1):
        """
        Initialise le connecteur IBKR/Lynx
        
        Args:
            host: Adresse IP du serveur TWS/IB Gateway (localhost par d√©faut)
            port: Port de connexion
                - 4001 pour IB Gateway Live (Lynx)
                - 4002 pour IB Gateway Paper/Demo (Lynx)
                - 7496 pour TWS Live
                - 7497 pour TWS Paper/Demo
            client_id: ID unique du client (0-32)
        """
        self.wrapper = IBKRWrapper()
        self.client = IBKRClient(self.wrapper)
        self.host = host
        self.port = port
        self.client_id = client_id
        self.connected = False
        self.thread = None
        
    def connect(self):
        """√âtablit la connexion avec TWS/IB Gateway"""
        try:
            self.client.connect(self.host, self.port, self.client_id)
            
            # D√©marrer le thread pour g√©rer les messages
            self.thread = threading.Thread(target=self.client.run, daemon=True)
            self.thread.start()
            
            # Attendre la confirmation de connexion
            time.sleep(2)
            
            if self.client.isConnected():
                self.connected = True
                print(f"‚úÖ Connect√© √† IBKR sur {self.host}:{self.port}")
                return True
            else:
                print("‚ùå √âchec de la connexion √† IBKR")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur de connexion IBKR: {e}")
            return False
    
    def disconnect(self):
        """D√©connecte de TWS/IB Gateway"""
        if self.connected:
            self.client.disconnect()
            self.connected = False
            print("üîå D√©connect√© de IBKR")
    
    def create_contract(self, symbol, sec_type='STK', exchange='SMART', currency='EUR'):
        """
        Cr√©e un objet Contract pour IBKR
        
        Args:
            symbol: Symbole du ticker (ex: 'AIR' pour Airbus)
            sec_type: Type de s√©curit√© ('STK'=action, 'FUT'=future, 'OPT'=option)
            exchange: Bourse ('SMART', 'EURONEXT', 'NYSE', etc.)
            currency: Devise ('EUR', 'USD', etc.)
        
        Returns:
            Contract object
        """
        contract = Contract()
        contract.symbol = symbol
        contract.secType = sec_type
        contract.exchange = exchange
        contract.currency = currency
        return contract
    
    def get_market_data(self, contract, req_id=1):
        """
        Demande les donn√©es de march√© en temps r√©el
        
        Args:
            contract: Objet Contract IBKR
            req_id: ID unique de la requ√™te
        
        Returns:
            dict avec les donn√©es de march√© ou None
        """
        if not self.connected:
            print("‚ùå Pas connect√© √† IBKR")
            return None
        
        # Demander les donn√©es de march√©
        self.client.reqMktData(req_id, contract, "", False, False, [])
        
        # Attendre que les donn√©es arrivent
        time.sleep(2)
        
        # Annuler la souscription
        self.client.cancelMktData(req_id)
        
        return self.wrapper.market_data.get(req_id)
    
    def get_historical_data(self, contract, duration='1 M', bar_size='1 day', 
                           what_to_show='TRADES', req_id=2):
        """
        R√©cup√®re les donn√©es historiques
        
        Args:
            contract: Objet Contract IBKR
            duration: Dur√©e des donn√©es ('1 D', '1 W', '1 M', '1 Y')
            bar_size: Taille des barres ('1 min', '5 mins', '1 hour', '1 day')
            what_to_show: Type de donn√©es ('TRADES', 'MIDPOINT', 'BID', 'ASK')
            req_id: ID unique de la requ√™te
        
        Returns:
            DataFrame avec les donn√©es historiques
        """
        if not self.connected:
            print("‚ùå Pas connect√© √† IBKR")
            return None
        
        # R√©initialiser l'√©v√©nement
        self.wrapper.data_ready.clear()
        self.wrapper.historical_data[req_id] = []
        
        # Demander les donn√©es historiques
        self.client.reqHistoricalData(
            reqId=req_id,
            contract=contract,
            endDateTime='',  # Vide = maintenant
            durationStr=duration,
            barSizeSetting=bar_size,
            whatToShow=what_to_show,
            useRTH=1,  # 1 = Regular Trading Hours only
            formatDate=1,  # 1 = format yyyyMMdd HH:mm:ss
            keepUpToDate=False,
            chartOptions=[]
        )
        
        # Attendre la r√©ception des donn√©es (max 10 secondes)
        self.wrapper.data_ready.wait(timeout=10)
        
        # Convertir en DataFrame
        if req_id in self.wrapper.historical_data and self.wrapper.historical_data[req_id]:
            df = pd.DataFrame(self.wrapper.historical_data[req_id])
            df['date'] = pd.to_datetime(df['date'])
            df.set_index('date', inplace=True)
            return df
        else:
            print(f"‚ö†Ô∏è Aucune donn√©e historique re√ßue pour reqId {req_id}")
            return None
    
    def search_contract(self, symbol, sec_type='STK', req_id=3):
        """
        Recherche les d√©tails d'un contrat
        
        Args:
            symbol: Symbole √† rechercher
            sec_type: Type de s√©curit√©
            req_id: ID unique de la requ√™te
        
        Returns:
            Liste des ContractDetails trouv√©s
        """
        if not self.connected:
            print("‚ùå Pas connect√© √† IBKR")
            return None
        
        # R√©initialiser
        self.wrapper.data_ready.clear()
        self.wrapper.contract_details_list = []
        
        # Cr√©er un contrat de recherche
        contract = Contract()
        contract.symbol = symbol
        contract.secType = sec_type
        contract.exchange = 'SMART'
        
        # Demander les d√©tails
        self.client.reqContractDetails(req_id, contract)
        
        # Attendre la r√©ponse
        self.wrapper.data_ready.wait(timeout=5)
        
        return self.wrapper.contract_details_list


# Fonction utilitaire pour tester la connexion
def test_connection():
    """Test de connexion √† IBKR/Lynx"""
    print("üîå Test de connexion √† IBKR/Lynx...")
    print("\n‚ö†Ô∏è  IMPORTANT: Avant de lancer ce test, assurez-vous que:")
    print("   1. TWS ou IB Gateway est lanc√© avec vos identifiants Lynx")
    print("   2. L'API est activ√©e (Configure > API > Settings)")
    print("   3. Vous utilisez le bon port:")
    print("      - Port 4002 pour IB Gateway Demo/Paper")
    print("      - Port 4001 pour IB Gateway Live")
    print("      - Port 7497 pour TWS Demo/Paper")
    print("      - Port 7496 pour TWS Live\n")
    
    connector = IBKRConnector(
        host='127.0.0.1',
        port=4002,  # IB Gateway Paper Trading (Lynx Demo)
        client_id=1
    )
    
    if connector.connect():
        print("\n‚úÖ Connexion √©tablie!")
        
        # Test: Rechercher un contrat
        print("\nüîç Recherche du contrat AIR (Airbus)...")
        details = connector.search_contract('AIR', 'STK')
        if details:
            print(f"   Trouv√© {len(details)} contrat(s)")
            for detail in details[:3]:  # Afficher les 3 premiers
                print(f"   - {detail.contract.symbol} @ {detail.contract.exchange}")
        
        # Test: Donn√©es de march√©
        print("\nüìä R√©cup√©ration des donn√©es de march√© pour AIR...")
        contract = connector.create_contract('AIR', 'STK', 'SMART', 'EUR')
        market_data = connector.get_market_data(contract)
        if market_data:
            print(f"   Prix: {market_data}")
        
        # Test: Donn√©es historiques
        print("\nüìà R√©cup√©ration des donn√©es historiques...")
        hist_data = connector.get_historical_data(contract, duration='5 D', bar_size='1 day')
        if hist_data is not None:
            print(f"   {len(hist_data)} barres re√ßues")
            print(hist_data.tail())
        
        connector.disconnect()
    else:
        print("\n‚ùå Impossible de se connecter. V√©rifiez que:")
        print("   1. TWS ou IB Gateway est lanc√©")
        print("   2. L'API est activ√©e dans TWS (Config > API > Settings)")
        print("   3. Le port est correct (7497 pour paper, 7496 pour live)")


if __name__ == '__main__':
    test_connection()
