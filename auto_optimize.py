"""
Script d'auto-optimisation autonome pour Boursicotor
Boucle sur les strat√©gies en ajoutant des indicateurs si n√©cessaire
"""
import sys
import pandas as pd
from datetime import datetime
from backend.config import logger
from backend.models import SessionLocal, Ticker, HistoricalData
from backend.backtesting_engine import StrategyGenerator, BacktestingEngine
from backend.strategy_manager import StrategyManager


class AutoOptimizer:
    """Optimiseur autonome de strat√©gies"""
    
    def __init__(self, symbol: str = "WLN", capital: float = 1000.0, iterations: int = 500):
        self.symbol = symbol
        self.capital = capital
        self.iterations = iterations
        self.best_return = -float('inf')
        self.best_strategy = None
        self.best_result = None
        self.history = []
        
    def load_data(self):
        """Charge les donn√©es depuis la base"""
        logger.info(f"üìä Chargement des donn√©es pour {self.symbol}...")
        db = SessionLocal()
        try:
            ticker = db.query(Ticker).filter(Ticker.symbol == self.symbol).first()
            if not ticker:
                logger.error(f"‚ùå Ticker {self.symbol} non trouv√©")
                return None
            
            # Charger toutes les donn√©es historiques
            data = db.query(HistoricalData).filter(
                HistoricalData.ticker_id == ticker.id
            ).order_by(HistoricalData.timestamp.asc()).all()
            
            if len(data) < 100:
                logger.error(f"‚ùå Pas assez de donn√©es pour {self.symbol} (minimum 100 points)")
                return None
            
            # Convertir en DataFrame
            df = pd.DataFrame([{
                'timestamp': d.timestamp,
                'open': d.open,
                'high': d.high,
                'low': d.low,
                'close': d.close,
                'volume': d.volume
            } for d in data])
            
            df.set_index('timestamp', inplace=True)
            
            logger.info(f"‚úÖ {len(df)} points de donn√©es charg√©s ({df.index.min()} - {df.index.max()})")
            return df
            
        finally:
            db.close()
    
    def run_cycle(self, cycle_num: int, target_return: float = 5.0):
        """
        Ex√©cute un cycle d'optimisation
        
        Args:
            cycle_num: Num√©ro du cycle
            target_return: Objectif de retour en %
            
        Returns:
            (best_strategy, best_result, achieved_target)
        """
        print(f"\n{'='*80}")
        print(f"üîÑ CYCLE {cycle_num} - Objectif: {target_return}% | It√©rations: {self.iterations}")
        print(f"{'='*80}\n")
        
        # Charger les donn√©es
        df = self.load_data()
        if df is None:
            return None, None, False
        
        # Cr√©er le g√©n√©rateur de strat√©gies
        generator = StrategyGenerator(target_return=target_return)
        engine = BacktestingEngine(initial_capital=self.capital)
        
        cycle_best_return = -float('inf')
        cycle_best_strategy = None
        cycle_best_result = None
        
        # Statistiques du cycle
        strategy_counts = {
            'ultimate': 0, 'hyper': 0, 'mega': 0, 'ultra': 0,
            'advanced': 0, 'multi': 0, 'others': 0
        }
        
        print(f"üöÄ D√©marrage de {self.iterations} it√©rations...\n")
        
        for i in range(self.iterations):
            # G√©n√©rer strat√©gie al√©atoire (priorit√© ULTIMATE √† 85%)
            import numpy as np
            strategy_type = np.random.choice(
                ['ma', 'rsi', 'multi', 'advanced', 'momentum', 'mean_reversion', 
                 'ultra_aggressive', 'mega', 'hyper', 'ultimate', 'ultimate', 'ultimate'],
                p=[0.01, 0.01, 0.01, 0.01, 0.01, 0.02, 0.03, 0.03, 0.02, 0.283, 0.283, 0.284]
            )
            
            # Compter les types de strat√©gies
            if strategy_type == 'ultimate':
                strategy = generator.generate_random_ultimate_strategy()
                strategy_counts['ultimate'] += 1
            elif strategy_type == 'hyper':
                strategy = generator.generate_random_hyper_strategy()
                strategy_counts['hyper'] += 1
            elif strategy_type == 'mega':
                strategy = generator.generate_random_mega_strategy()
                strategy_counts['mega'] += 1
            elif strategy_type == 'ultra_aggressive':
                strategy = generator.generate_random_ultra_aggressive_strategy()
                strategy_counts['ultra'] += 1
            elif strategy_type == 'advanced':
                strategy = generator.generate_random_advanced_multi_strategy()
                strategy_counts['advanced'] += 1
            elif strategy_type == 'multi':
                strategy = generator.generate_random_multi_strategy()
                strategy_counts['multi'] += 1
            elif strategy_type == 'ma':
                strategy = generator.generate_random_ma_strategy()
                strategy_counts['others'] += 1
            elif strategy_type == 'rsi':
                strategy = generator.generate_random_rsi_strategy()
                strategy_counts['others'] += 1
            elif strategy_type == 'momentum':
                strategy = generator.generate_random_momentum_strategy()
                strategy_counts['others'] += 1
            else:
                strategy = generator.generate_random_mean_reversion_strategy()
                strategy_counts['others'] += 1
            
            # Backtester
            result = engine.run_backtest(df, strategy, self.symbol)
            
            # V√©rifier si c'est le meilleur
            if result.total_return > cycle_best_return:
                cycle_best_return = result.total_return
                cycle_best_strategy = strategy
                cycle_best_result = result
                
                # Afficher les progr√®s
                if i % 50 == 0 or result.total_return > 0:
                    print(f"  ‚ú® Iter {i+1:3d}/{self.iterations} - Nouveau best: {result.total_return:+7.2f}% "
                          f"| {strategy.name} | Trades: {result.total_trades}")
            
            # Afficher progression tous les 100
            elif (i+1) % 100 == 0:
                print(f"  ‚è≥ Iter {i+1:3d}/{self.iterations} - Best actuel: {cycle_best_return:+7.2f}%")
        
        # R√©sum√© du cycle
        print(f"\n{'‚îÄ'*80}")
        print(f"üìä R√âSULTATS CYCLE {cycle_num}")
        print(f"{'‚îÄ'*80}")
        print(f"üéØ Meilleur retour: {cycle_best_return:+.2f}% (objectif: {target_return}%)")
        print(f"üìà Strat√©gie: {cycle_best_strategy.name if cycle_best_strategy else 'N/A'}")
        
        if cycle_best_result:
            print(f"üíº Capital final: {cycle_best_result.final_capital:.2f} ‚Ç¨ (initial: {self.capital} ‚Ç¨)")
            print(f"üîÑ Trades totaux: {cycle_best_result.total_trades}")
            print(f"‚úÖ Win rate: {cycle_best_result.win_rate:.1f}%")
            print(f"üìâ Max drawdown: {cycle_best_result.max_drawdown:.2f}%")
            if cycle_best_result.sharpe_ratio is not None:
                print(f"üìä Sharpe ratio: {cycle_best_result.sharpe_ratio:.2f}")
        
        print(f"\nüé≤ Distribution des strat√©gies test√©es:")
        print(f"   ULTIMATE:  {strategy_counts['ultimate']:3d} ({strategy_counts['ultimate']/self.iterations*100:.1f}%)")
        print(f"   HYPER:     {strategy_counts['hyper']:3d} ({strategy_counts['hyper']/self.iterations*100:.1f}%)")
        print(f"   MEGA:      {strategy_counts['mega']:3d} ({strategy_counts['mega']/self.iterations*100:.1f}%)")
        print(f"   ULTRA:     {strategy_counts['ultra']:3d} ({strategy_counts['ultra']/self.iterations*100:.1f}%)")
        print(f"   ADVANCED:  {strategy_counts['advanced']:3d} ({strategy_counts['advanced']/self.iterations*100:.1f}%)")
        print(f"   MULTI:     {strategy_counts['multi']:3d} ({strategy_counts['multi']/self.iterations*100:.1f}%)")
        print(f"   AUTRES:    {strategy_counts['others']:3d} ({strategy_counts['others']/self.iterations*100:.1f}%)")
        
        # Sauvegarder si meilleur global
        if cycle_best_return > self.best_return:
            self.best_return = cycle_best_return
            self.best_strategy = cycle_best_strategy
            self.best_result = cycle_best_result
            
            # Sauvegarder dans la base
            if cycle_best_strategy and cycle_best_result:
                strategy_id = StrategyManager.save_strategy(cycle_best_strategy, cycle_best_result)
                print(f"\nüíæ Nouvelle meilleure strat√©gie sauvegard√©e (ID: {strategy_id})")
        
        # Enregistrer dans l'historique
        self.history.append({
            'cycle': cycle_num,
            'return': cycle_best_return,
            'strategy': cycle_best_strategy.name if cycle_best_strategy else None,
            'trades': cycle_best_result.total_trades if cycle_best_result else 0,
            'win_rate': cycle_best_result.win_rate if cycle_best_result else 0,
            'achieved_target': cycle_best_return >= target_return
        })
        
        achieved = cycle_best_return >= target_return
        
        if achieved:
            print(f"\nüéâ OBJECTIF ATTEINT ! {cycle_best_return:.2f}% >= {target_return}%")
        else:
            print(f"\n‚ö†Ô∏è  Objectif non atteint: {cycle_best_return:.2f}% < {target_return}%")
            print(f"üí° Prochaine √©tape: Ajuster les param√®tres ou augmenter les indicateurs")
        
        print(f"{'='*80}\n")
        
        return cycle_best_strategy, cycle_best_result, achieved
    
    def run_optimization(self, num_cycles: int = 5, target_return: float = 5.0):
        """
        Lance l'optimisation compl√®te sur plusieurs cycles
        
        Args:
            num_cycles: Nombre de cycles √† ex√©cuter
            target_return: Objectif de retour en %
        """
        print(f"\n{'‚ñà'*80}")
        print(f"ü§ñ AUTO-OPTIMISATION BOURSICOTOR")
        print(f"{'‚ñà'*80}")
        print(f"üìÖ D√©but: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üéØ Objectif: {target_return}% de retour")
        print(f"üî¢ Nombre de cycles: {num_cycles}")
        print(f"üîÑ It√©rations par cycle: {self.iterations}")
        print(f"üí∞ Capital initial: {self.capital} ‚Ç¨")
        print(f"üìä Symbole: {self.symbol}")
        print(f"{'‚ñà'*80}\n")
        
        start_time = datetime.now()
        
        for cycle in range(1, num_cycles + 1):
            strategy, result, achieved = self.run_cycle(cycle, target_return)
            
            # Si objectif atteint, on peut s'arr√™ter
            if achieved:
                print(f"üèÜ SUCC√àS ! Objectif atteint au cycle {cycle}/{num_cycles}")
                print(f"üéØ Meilleur retour global: {self.best_return:.2f}%")
                break
            
            # Sinon, continuer avec le cycle suivant
            if cycle < num_cycles:
                print(f"üîÑ Passage au cycle suivant ({cycle+1}/{num_cycles})...\n")
        
        # R√©sum√© final
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        print(f"\n{'‚ñà'*80}")
        print(f"üìä R√âSUM√â FINAL DE L'OPTIMISATION")
        print(f"{'‚ñà'*80}")
        print(f"‚è±Ô∏è  Dur√©e totale: {duration:.1f} secondes ({duration/60:.1f} minutes)")
        print(f"üî¢ Cycles compl√©t√©s: {len(self.history)}/{num_cycles}")
        print(f"üéØ Meilleur retour global: {self.best_return:+.2f}%")
        
        if self.best_strategy:
            print(f"üèÜ Meilleure strat√©gie: {self.best_strategy.name}")
            print(f"üíº Capital final: {self.best_result.final_capital:.2f} ‚Ç¨")
            print(f"üîÑ Trades: {self.best_result.total_trades}")
            print(f"‚úÖ Win rate: {self.best_result.win_rate:.1f}%")
        
        print(f"\nüìà Progression des cycles:")
        for h in self.history:
            status = "‚úÖ" if h['achieved_target'] else "‚ùå"
            print(f"   Cycle {h['cycle']}: {h['return']:+7.2f}% | {h['strategy']} | "
                  f"{h['trades']} trades | WR: {h['win_rate']:.1f}% {status}")
        
        print(f"{'‚ñà'*80}\n")
        
        return self.best_strategy, self.best_result


def main():
    """Point d'entr√©e du script"""
    # Param√®tres par d√©faut
    num_cycles = 5
    capital = 1000.0
    iterations = 500
    target_return = 5.0
    symbol = "WLN"
    
    # Lire les arguments de ligne de commande si fournis
    if len(sys.argv) > 1:
        num_cycles = int(sys.argv[1])
    if len(sys.argv) > 2:
        capital = float(sys.argv[2])
    if len(sys.argv) > 3:
        iterations = int(sys.argv[3])
    if len(sys.argv) > 4:
        target_return = float(sys.argv[4])
    
    print(f"\nüéÆ Configuration:")
    print(f"   - Nombre de cycles: {num_cycles}")
    print(f"   - Capital: {capital} ‚Ç¨")
    print(f"   - It√©rations/cycle: {iterations}")
    print(f"   - Objectif: {target_return}%")
    print(f"   - Symbole: {symbol}\n")
    
    # Cr√©er et lancer l'optimiseur
    optimizer = AutoOptimizer(symbol=symbol, capital=capital, iterations=iterations)
    best_strategy, best_result = optimizer.run_optimization(num_cycles, target_return)
    
    if best_strategy and best_result:
        print(f"‚úÖ Optimisation termin√©e avec succ√®s !")
        print(f"üéØ Meilleur r√©sultat: {best_result.total_return:+.2f}%")
    else:
        print(f"‚ö†Ô∏è  Aucune strat√©gie profitable trouv√©e")
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
